import { CACHE_MANAGER } from '@nestjs/cache-manager';
import { Cache } from 'cache-manager';
import { Inject, Injectable } from '@nestjs/common';
import type { Socket } from 'socket.io';
import { ChatMessageDTO } from './dto/chat-message.dto';
import { LanguageModelService } from '../language-model/language-model.service';
import { ConversationContext } from './dto/conversation.dto';
import {
    generateStepsSystemPrompt,
    generateStepsUserPrompt,
} from 'src/common/prompts/generate-steps.prompt';
import { Step } from './dto/step.dto';

@Injectable()
export class AgentSocketService {
    constructor(
        @Inject(CACHE_MANAGER) private cacheManager: Cache,
        @Inject(LanguageModelService) private llm: LanguageModelService,
    ) {}

    async orchestrate(client: Socket, data: ChatMessageDTO) {
        let context = await this.cacheManager.get<ConversationContext>(
            data.conversationId,
        );

        if (!context) {
            context = {
                messages: [
                    {
                        text: data.message,
                        from: 'user',
                        to: 'agent',
                    },
                ],
                steps: data.existingSteps,
                conversationId: data.conversationId,
                teamId: data.teamId,
                userId: data.userId,
            };
            await this.cacheManager.set(data.conversationId, context);
        }
        const systemPrompt = generateStepsSystemPrompt();
        const userPrompt = generateStepsUserPrompt({
            context,
            message: data.message,
        });
        const res = await this.llm.generate([
            {
                role: 'system',
                content: systemPrompt,
            },
            {
                role: 'user',
                content: userPrompt,
            },
        ]);
        console.log(res);
        const steps = JSON.parse(res.message.content);
        if (this.validateSteps(steps)) {
            client.send(
                JSON.stringify({
                    event: 'AGENT',
                    data: {
                        success: true,
                        message: steps,
                    },
                }),
            );
        } else {
            client.send(
                JSON.stringify({
                    event: 'ERROR',
                    data: {
                        success: false,
                        message: 'Invalid steps generated by language model.',
                    },
                }),
            );
        }
    }

    validateSteps(generatedSteps: any) {
        const steps: Step[] = generatedSteps;
        return steps;
    }
}
