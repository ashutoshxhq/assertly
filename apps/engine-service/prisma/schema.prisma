// Define the data source and generate
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the Prisma client generation
generator client {
  provider = "prisma-client-js"
}

model Project {
  id               String             @id @default(uuid())
  name             String
  status           String?
  metadata         Json?
  teamId           String
  testSpecs        TestSpec[]
  userFlows        UserFlow[]
  testRuns         TestRun[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  SessionRecording SessionRecording[]

  @@map("projects")
}

model TestSpec {
  id            String         @id @default(uuid())
  name          String
  status        String?
  metadata      Json?
  teamId        String
  project       Project        @relation(fields: [projectId], references: [id])
  projectId     String
  steps         Step[]
  testRuns      TestRun[]
  testSchedules TestSchedule[]
  lastRunAt     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("test_specs")
}

model UserFlow {
  id        String   @id @default(uuid())
  name      String
  status    String?
  steps     Json?
  metadata  Json?
  teamId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_flows")
}

model SessionRecording {
  id        String   @id @default(uuid())
  name      String
  status    String?
  steps     Json?
  metadata  Json?
  teamId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session_recordings")
}

model TestSchedule {
  id        String   @id @default(uuid())
  teamId    String
  schedule  Json
  spec      TestSpec @relation(fields: [specId], references: [id])
  specId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("test_schedules")
}

model Step {
  id        String    @id @default(uuid())
  title     String?
  stepType  String?
  props     Json?
  status    String?
  teamId    String
  spec      TestSpec? @relation(fields: [specId], references: [id])
  specId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("steps")
}

model TestRun {
  id             String    @id @default(uuid())
  status         String?
  metadata       Json?
  stepContext    Json?
  consoleContext Json?
  networkContext Json?
  spec           TestSpec  @relation(fields: [specId], references: [id])
  specId         String
  project        Project   @relation(fields: [projectId], references: [id])
  projectId      String
  finishedAt     DateTime?
  teamId         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("test_runs")
}

model ClientCredential {
  id           String   @id @default(uuid())
  clientId     String
  clientSecret String
  permissions  Json
  teamId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("client_credentials")
}

model Artifact {
  id           String   @id @default(uuid())
  name         String
  artifactType String
  artifactUrl  String
  metadata     Json
  teamId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("artifacts")
}

model Integration {
  id              String   @id @default(uuid())
  name            String
  integrationType String
  credentials     Json
  teamId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("integrations")
}
